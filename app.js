// Generated by CoffeeScript 1.7.1
(function() {
  var autocomplete, dir, evaluate, getPropertys, help, load, macroexpand, space, suggest, type;

  $(function() {
    var $$, $form, $input, $log, history;
    $log = $("#log");
    $form = $("#console");
    $input = $("#console-input");
    setTimeout((function() {
      $input.focus();
      return $form.submit();
    }), 100);
    history = [];
    $$ = null;
    return $form.submit(function(ev) {
      var ary, buffer, clear, err, input, log, n, output, pre, _input, _ref;
      input = $input.val();
      history.unshift(input);
      if (n = (/\.(\d+)$/.exec(input) || [false, false])[1]) {
        $input.val(history[n]);
      } else if (/\.hist$/.test(input)) {
        $input.val("");
        output = history.join("\n");
        $log.append("coffee> " + input + "\n" + output);
      } else if (/\s$/.test(input)) {
        _ref = autocomplete(input), pre = _ref[0], ary = _ref[1];
        if (ary.length === 0) {

        } else if (ary.length === 1) {
          _input = (pre + " " + ary[0]).replace(/^\s+/, "");
          $input.val(_input);
        } else {
          _input = input.replace(/\s+$/, "");
          $input.val(_input);
          $log.append("coffee> " + input + "\n" + (ary.join("\n")));
          $(window).scrollTop(9999999);
        }
      } else if (/\.help$/.test(input)) {
        output = help;
        $input.val("");
        $log.append("coffee> " + input + "\n" + output);
      } else {
        buffer = "";
        log = function(str) {
          buffer += str + "\n";
          return void 0;
        };
        clear = function() {
          $log.html("");
          return void 0;
        };
        try {
          $$ = output = evaluate(macroexpand(input), {
            log: log,
            clear: clear,
            dir: dir,
            type: type,
            load: load,
            $$: $$
          });
        } catch (_error) {
          err = _error;
          $$ = output = buffer + err + "\n" + err.stack;
        }
        $input.val("");
        $log.append("coffee> " + input + "\n" + output);
      }
      setTimeout((function() {
        $(window).scrollTop(9999999);
        return $input.focus();
      }), 100);
      return false;
    });
  });

  help = ".help  show repl options\n.1     last input\n.[n]   nth input\n.hist  view history\n\nc[space][enter]\ncons[space][enter]\nconsole.[space][enter]\nconsole.lo[space][enter]\n       autosuggestion\n\nlog(str)   alt console.log()\nclear()    alt console.clear()\ndir(obj [, depth])\n           alt console.dir()\ntype(obj)  alt typeof()\nload(url)  load js file\n$$         last result variable\n\n";

  load = function(url, next) {
    var script;
    script = document.createElement("script");
    script.src = url;
    script.onload = next;
    document.body.appendChild(script);
    return void 0;
  };

  macroexpand = function(code) {
    return CoffeeScript.compile(code, {
      bare: true
    }).replace(/var[^\;]+;\n\n/, "");
  };

  evaluate = function(code, env) {
    if (env == null) {
      env = window;
    }
    var result;
  with(env){
    result = eval(code);
  };
    return result;
  };

  getPropertys = function(o) {
    var ary, key, tmp, _ary;
    if (o == null) {
      return [];
    }
    ary = [].concat(Object.getOwnPropertyNames(o), (function() {
      var _results;
      _results = [];
      for (key in o) {
        _results.push(key);
      }
      return _results;
    })());
    tmp = {};
    _ary = ary.filter(function(key) {
      if (tmp[key] != null) {
        return false;
      } else {
        return tmp[key] = true;
      }
    });
    return _ary.sort();
  };

  suggest = function(code, token) {
    var err, reg, result;
    reg = new RegExp("^" + token + ".*");
    try {
      result = evaluate("(" + code + ")");
    } catch (_error) {
      err = _error;
      result = {};
    }
    return getPropertys(result).filter(function(key) {
      return reg.test(key);
    });
  };

  autocomplete = function(code) {
    var ary, key, obj, pre, result, token, tokens;
    tokens = (code + " ").split(/\s+/).slice(0, -1);
    token = tokens.pop();
    pre = tokens.join(" ");
    if (token.indexOf(".") === -1) {
      result = suggest("window", token).map(function(str) {
        return str.replace(/\s+$/, "");
      });
    } else {
      ary = token.split(".");
      obj = ary.slice(0, -1).join(".");
      key = ary[ary.length - 1];
      result = suggest(obj, key).map(function(str) {
        return obj + "." + str.replace(/\s+$/, "");
      });
    }
    return [pre, result];
  };

  type = function(o) {
    var _type;
    if (o === null) {
      return "null";
    } else if (o === void 0) {
      return "undefined";
    } else if (o === window) {
      return "global";
    } else if (o.nodeType != null) {
      return "node";
    } else if (typeof o !== "object") {
      return typeof o;
    } else {
      _type = Object.prototype.toString.call(o);
      if (_type === "[object Object]") {
        _type = "" + o.constructor;
      }
      return (/^\[object (\w+)\]$/.exec(_type) || /^\s*function\s+(\w+)/.exec(_type) || ["", "object"])[1].toLowerCase();
    }
  };

  space = function(i) {
    var _i, _results;
    return (function() {
      _results = [];
      for (var _i = 0; 0 <= i ? _i <= i : _i >= i; 0 <= i ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function() {
      return "";
    }).join("  ");
  };

  dir = function(o, max, i) {
    var dumpObj, v;
    if (max == null) {
      max = 1;
    }
    if (i == null) {
      i = 0;
    }
    dumpObj = function(o) {
      if (getPropertys(o).length === 0) {
        return "{}";
      } else {
        return "{\n" + ((getPropertys(o).map(function(k) {
          return "" + (space(i + 1)) + k + ": " + (dir(o[k], max, i + 1));
        })).join(",\n")) + "\n" + (space(i)) + "}";
      }
    };
    switch (type(o)) {
      case "null":
      case "undefined":
      case "boolean":
      case "number":
        return "" + o;
      case "string":
        return "\"" + o + "\"";
      case "function":
        return Object.prototype.toString.call(o);
      case "date":
        return JSON.stringify(o);
      case "array":
        if (i < max) {
          return "[" + (((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              v = o[_i];
              _results.push(dir(v, max, i + 1));
            }
            return _results;
          })()).join(", ")) + "]";
        } else {
          return Object.prototype.toString.call(o);
        }
        break;
      default:
        if (i < max) {
          return dumpObj(o);
        } else {
          return Object.prototype.toString.call(o);
        }
    }
  };

}).call(this);

//# sourceMappingURL=app.map
